/*
========================
Домашнее задание.

Курс: Разработка интерфейса на JavaScript.
Дисциплина: Основы JavaScript.

Домашнее задание №28: Прототипы. Контекст. Виды функций. Замыкания.

Решите данные задачи.
1. Создайте объект с несколькими ключами и попытайтесь вызвать у него функцию, 
которой нет у этого объекта, которая посчитает количество букв в строке.

2. Комбинирования прототипа и контекста. 
Написать функцию, которая возведёт переменную (число) в степень.

3. Написать функции через замыкания, которая выводит полный URL путь к сайту.
 `http://${url}.${domain}` Внешняя функция принимает domain, а внутренняя URL. 
========================
*/

/*
========================
СТИЛИ 
========================
*/

/* === Общие стили для страницы === */
body {
  margin: 0; /* Убираем все внешние отступы (по умолчанию браузеры добавляют их) */

  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  /* Устанавливаем стек шрифтов: сначала Segoe UI, если нет — Tahoma, потом Verdana и т.д. */

  background: linear-gradient(135deg, #1e1e2f, #282a36);
  /* Фоновый градиент под углом 135 градусов: от глубокого синего к фиолетовому.
     Создаёт тёмную атмосферу, идеальную для ночной темы. */

  color: #f5f5f5; /* Основной цвет текста — светло-серый для хорошей контрастности на тёмном фоне */

  display: flex; /* Используем Flexbox для выравнивания всего контента внутри body */
  justify-content: center; /* Центрируем весь контент по горизонтали */
  align-items: flex-start; /* Контент прижат к верху окна, а не по центру (чтобы выглядело как панель) */

  min-height: 100vh; /* Высота body — минимум 100% высоты экрана (viewport height) */
  padding: 2rem; /* Внутренний отступ вокруг всего содержимого (по 2 рема со всех сторон) */
}


/* === Центральный контейнер со всеми задачами === */
.container {
  background-color: #2b2b3d;
  /* Цвет фона контейнера — тёмно-серый с синеватым оттенком.
     Хорошо контрастирует с градиентным фоном страницы. */

  padding: 2rem;
  /* Внутренние отступы со всех сторон. Обеспечивает «воздух» внутри контейнера. */

  border-radius: 20px;
  /* Скруглённые углы — визуально «мягче», приятнее глазу. */

  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);
  /* Тень под контейнером: создаёт ощущение глубины и приподнятости над фоном.
     Параметры:
     - 0 — смещение по оси X (нет сдвига вбок),
     - 8px — смещение по оси Y (тень идёт вниз),
     - 20px — размытие,
     - rgba(...) — чёрная тень с прозрачностью 50%. */

  max-width: 900px;
  /* Максимальная ширина контейнера — чтобы он не растягивался слишком сильно на больших экранах. */

  width: 100%;
  /* Занимает всю доступную ширину родителя, но не превышает max-width. */
}


/* === Заголовок страницы === */
h1 {
  text-align: center;
  /* Центрируем заголовок по горизонтали. */

  color: #ffd369;
  /* Цвет текста — ярко-жёлтый, выделяется на тёмном фоне, привлекает внимание. */

  margin-bottom: 0.5rem;
  /* Отступ снизу — создаёт пространство между заголовком и следующим элементом. */
}

.subtitle {
  text-align: center;
  /* Тоже центрируем — чтобы визуально соответствовать заголовку выше. */

  color: #aaaaaa;
  /* Светло-серый цвет текста — менее броский, подходит для подзаголовка/описания. */

  font-size: 1rem;
  /* Размер шрифта — стандартный, не больше и не меньше. Можно увеличить до 1.2rem при желании. */

  margin-bottom: 2rem;
  /* Большой отступ снизу — создаёт дистанцию между подзаголовком и следующими блоками (например, кнопкой). */
}


/* === Оформление каждой задачи === */
.task {
  background-color: #1e1e2e;
  /* Цвет фона блока задачи — чуть темнее, чем у контейнера.
     Помогает визуально отделить блоки друг от друга. */

  border-left: 4px solid #ffd369;
  /* Яркая вертикальная линия слева — визуальный акцент на задаче.
     Цвет — тот же ярко-жёлтый, что и в заголовке. */

  border-radius: 10px;
  /* Скругляем углы, чтобы блок выглядел мягко и современно. */

  padding: 1rem;
  /* Внутренние отступы внутри блока — создают «воздух» вокруг текста. */

  margin-bottom: 1.5rem;
  /* Отступ снизу — чтобы между задачами было пространство. */
}

.task h2 {
  color: #ffee94;
  /* Цвет заголовка задачи — светло-жёлтый, выделяется на фоне. */

  margin-top: 0;
  /* Убираем верхний отступ — чтобы заголовок не отрывался от верхней границы блока. */
}

.task p {
  margin: 0.5rem 0 1rem 0;
  /* Отступы:
     - сверху 0.5rem — чуть приподнять от заголовка;
     - по бокам 0;
     - снизу 1rem — чтобы отделить от кода/кнопок. */

  color: #dddddd;
  /* Светло-серый текст — читается хорошо, но не кричащий. */
}


/* === Кнопка запуска задач === */
button {
  background-color: #ff8c42;
  /* Основной цвет кнопки — ярко-оранжевый, тёплый, броский, вызывает внимание к действию. */

  color: white;
  /* Текст кнопки — белый, контрастирует с оранжевым фоном. */

  font-size: 1rem;
  /* Размер шрифта — стандартный (обычно это 16px). */

  border: none;
  /* Убираем стандартную рамку браузера вокруг кнопки. Кнопка становится «плоской». */

  border-radius: 8px;
  /* Скруглённые углы делают кнопку мягкой и современной. */

  padding: 0.6rem 1.2rem;
  /* Отступы:
     - сверху/снизу 0.6rem
     - слева/справа 1.2rem
     Это делает кнопку удобной для клика — палец/курсор не промахнётся. */

  cursor: pointer;
  /* При наведении курсор превращается в указатель — чтобы было понятно, что это интерактивный элемент. */

  transition: background-color 0.3s ease;
  /* Плавное изменение фона при наведении — анимация, приятная глазу. */

  display: block;
  /* Делаем кнопку блочным элементом (по умолчанию кнопки inline-block), чтобы сработал margin. */

  margin: 0 auto 1.5rem auto;
  /* Центрируем кнопку по горизонтали (auto слева и справа) и даём отступ снизу 1.5rem. */
}

button:hover {
  background-color: #e57c2d;
  /* При наведении цвет становится чуть темнее — эффект наведения, даёт ощущение отклика. */
}


/* === Вывод результата каждой задачи === */
.output {
  background-color: #1c1c2e;
  /* Очень тёмный фон — ближе к чернильному.
     Отлично подходит для терминального/кодового стиля. */

  padding: 1rem;
  /* Отступы внутри блока — чтобы текст не прилипал к краям. */

  border-radius: 10px;
  /* Скруглённые углы — чтобы визуально выглядело мягко. */

  font-family: 'Courier New', Courier, monospace;
  /* Моноширинный шрифт — классика для отображения кода и логов. */

  font-size: 0.95rem;
  /* Чуть меньше стандартного текста — чтобы влезало больше строк. */

  line-height: 1.5;
  /* Расстояние между строками — для читаемости. Особенно важно при многострочном выводе. */

  color: #00ffcc;
  /* Цвет текста — кислотно-бирюзовый, контрастный и стильный. */

  white-space: pre-wrap;
  /* Сохраняем все пробелы и переносы строк.
     Это позволяет красиво отображать текст, как в консоли. */

  overflow-x: auto;
  /* Если содержимое шире, чем блок — добавляется горизонтальный скролл. */

  max-height: 300px;
  /* Не даём блоку расти бесконечно вниз.
     Если вывод слишком длинный — появится вертикальный скролл. */
}

code {
  background-color: #3a3a4d;
  /* Тёмно-серый фон — немного выделяется на фоне `.output` или других текстов. */

  padding: 0.1rem 0.3rem;
  /* Отступы внутри `code` — компактные, чтобы не мешали, но добавляют читаемость. */

  border-radius: 5px;
  /* Скругление — даже у кода визуально приятно. */

  color: #ffd369;
  /* Ярко-жёлтый текст — типичный стиль «highlight» для кода. */

  font-family: 'Courier New', Courier, monospace;
  /* Моноширинный шрифт — абсолютная необходимость для любого отображения кода. */
}

